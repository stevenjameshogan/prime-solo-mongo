// 1. Create a collection named orders
db.createCollection("orders");

// 2. Insert at least 3 documents that represent an order. 
db.orders.insert({orderDate: new Date('2017-02-03'), orderTotal: 50.0, lineItems: [{unitPrice: 10.0, quantity: 5, productName: "Hippo Figurine"}]});
db.orders.insert({orderDate: new Date('2017-04-04'), orderTotal: 100.0, lineItems: [{unitPrice: 25.0, quantity: 4, productName: "Coffee Mug"}]});
db.orders.insert({orderDate: new Date('2017-01-02'), orderTotal: 15.0, lineItems: [{unitPrice: 5.0, quantity: 3, productName: "Taco"}]});

// 3. Find all orders and make them look pretty.
db.orders.find().pretty();

// 4. Find all orders with an orderDate that is after 1/31/2017.
db.orders.find({orderDate: {$gt: new Date('2017-01-31')}});

// 5. Change the orderTotal from 2/3/2017 to 63 dollars.
db.orders.update({orderDate: new Date('2017-02-03')},{$set: {orderTotal: 63.0}});

// STRETCH //

// 1. Add another lineItem to the order from 4/4/2017
db.orders.update({orderDate: new Date('2017-04-04')}, {$push: {lineItems: {"unitPrice": 30.0, "quantity": 2, "productName": "Cake"}}});

// 2. Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's
db.orders.update({orderDate: new Date('2017-01-02')}, {$set: {lineItems: {"unitPrice":2.5, "quantity": 2, "productName":"Transistor Radio"}}});

// 3. Find orders with lineItems that have a quantity that is less than 10, but greater than 2. 
db.orders.find({lineItems: {$elemMatch: {quantity: {$gt:2,$lt:10}}}});